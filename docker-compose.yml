services:
  mongo:
    image: mongo:latest
    container_name: mongo_container
    restart: always
    ports:
      - "27017:27017"
    volumes:
      - ./mongoDB:/data/mongoDB  # Mantiene los datos persistentes
    env_file:
      - ./mongoDB/.env

  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: backend_container
    restart: always
    ports:
      - "8000:8000"
    depends_on:
    #  - mongo
      - redis
    env_file:
      - ./backend/.env
      #- .env
    volumes:
      - ./backend:/app
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend_container
    restart: always
    ports:
      - "3000:3000"
    depends_on:
      - backend
    env_file:
      - ./frontend/.env.local
      #- .env.local
    volumes:
      - ./frontend:/app
      - /app/node_modules # Evita que los módulos de tu máquina sobrescriban los del contenedor
      #- ./frontend/src:/app/src
      #- ./frontend/node_modules:/app/node_modules

    command: npm run dev


  #web:
   # build: .
   # container_name: web_container
    #ports:
     # - "8000:5000"
    #develop:
     # watch:
      #  - action: sync
       #   path: .
        #  target: /code

  redis:
    image: "redis:alpine"
    container_name: redis_container
    restart: always
    ports:
      - "6379:6379"
